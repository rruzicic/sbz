import com.sbz.bank.model.*;
import java.util.List;
import java.util.Date;

// resources:
// project specification
// https://www.forbes.com/advisor/personal-loans/personal-loan-requirements/
// https://www.investopedia.com/financial-edge/0411/5-things-you-need-to-be-pre-approved-for-a-mortgage.aspx


rule "Say hi when a new credit req comes up"
    no-loop
    when
        $creditRequest: CreditRequest()
        shouldApproveCredit()
    then
        modify($creditRequest){setRecommendApproval(true);}
        System.out.println("Credit has been recommended for approval for client: " + $creditRequest.getClient().getFirstName() + " " + $creditRequest.getClient().getLastName());
end

query shouldApproveCredit()
    oldClientLongCredit()
end

query oldClientLongCredit()
    not CreditRequest(
        client.age >= 60,
        rateNumber >= 120
    ) and clientHasStableEarnings()
end

query clientHasStableEarnings()
    CreditRequest(
        clientEmploymentStatus != EmploymentStatus.UNEMPLOYED
    ) and clientHasEnoughAssets()
end

// since we don't have assets per se, we will use current balance on all accounts
query clientHasEnoughAssets()
    (
        $cr: CreditRequest($accounts: client.accounts) and
        Number(doubleValue > $cr.getMoneySum()*0.2) from accumulate(
            $account: BankAccount() from $accounts,
            init(int sum=0;),
            action(sum += $account.getBalance();),
            result(sum)
        )

    ) and clientHasGoodDTI()
end

// see if client has above 36% DTI to take on a new loan
query clientHasGoodDTI()

    (
        $c: CreditRequest($requests: client.creditRequests) and
        //clientIncome >= 1.36 * (calculateCurrentMonthlyDebtForClient(client.creditRequests) + calculateCreditMonthlyPayment(moneySum, rateNumber))
        Number(1.36*doubleValue + $c.getMoneySum()/$c.getRateNumber <= $c.getClientIncome()) from accumulate(
            $r: CreditRequest(getCreditStatus() == CreditStatus.APPROVED) from $requests,
            init(int sum=0),
            action(sum += $r.getMoneySum() / $r.getRateNumber();)
            result (sum)
        )
    )and clientCanPayThroughoutCreditLifecycle()
end


// see if a temp worker client's contract ends during credit payout
// and if the client's contract starts before the min date payout
query clientCanPayThroughoutCreditLifecycle()
    CreditRequest(
        (clientContractStart == null) || (clientContractStart < creditEndMin), // contract has to start before first possible loan payout, not necessary but w/e
        (clientContractEnd == null) || (clientContractEnd > creditEndMax) // contract has to end after last possible loan payout
    ) and clientMissedLoanPayment()
end

// see if client missed a loan payment or didn't pay a previous loan
query clientMissedLoanPayment()
        not(
        $cr: CreditRequest($requests: client.creditRequests) and
        Number(intValue >= 1) from accumulate (
            $r: CreditRequest(getCreditStatus() == CreditStatus.APPROVED
            && isMissedPayment() || isPaymentOverdue()) from $requests,
            count($r)
        )
        )

end

