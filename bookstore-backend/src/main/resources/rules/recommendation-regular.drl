import com.sbz.bookstore.model.Book;
import com.sbz.bookstore.model.RatingLevel;
import com.sbz.bookstore.model.Genre;
import com.sbz.bookstore.model.User;
import com.sbz.bookstore.model.Author;
import com.sbz.bookstore.model.facts.RegularUserRecommendedBooks;
import com.sbz.bookstore.model.facts.UserStatus;
import java.time.LocalDate;

rule "User is new if he has less than 10 reviews"
    agenda-group "user-new"
    lock-on-active
    when
        $user: User(reviews.size() < 10)
        $userStatus: UserStatus()
    then
        modify($userStatus) { setIsUserNew(true); }
end

rule "User is NOT new if he has more or equal to 10 reviews"
    agenda-group "user-new"
    lock-on-active
    when
        $user: User(reviews.size() >= 10)
        $userStatus: UserStatus()
    then
        modify($userStatus) { setIsUserNew(false); }
end

rule "User did NOT choose his favourite genres"
    agenda-group "user-choose-genres"
    lock-on-active
    when
        $user: User(favouriteGenres.isEmpty())
        $userStatus: UserStatus()
    then
        modify($userStatus) { setHasChosenFavouriteGenres(false); }
end

rule "User did choose his favourite genres"
    agenda-group "user-choose-genres"
    lock-on-active
    when
        $user: User(!favouriteGenres.isEmpty())
        $userStatus: UserStatus()
    then
        modify($userStatus) {setHasChosenFavouriteGenres(true);}
end

rule "recommend 10 best books if user chose his favourite genres"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == true, hasChosenFavouriteGenres == true)
        $recommendation: RegularUserRecommendedBooks()
    then
        modify($recommendation) {setRecommendedBooks($userStatus.getTenMostPopularBooksByFourAuthors());}
end


rule "Book liked by similar user"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $book: Book($userStatus.getBooksLikedBySimilarUsers.contains($book))
        $recommendationList: RegularUserRecommendedBooks()
    then
        modify($recommendationList){addToRecommended($book);}
end

rule "Book similar to books user likes"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $book: Book($userStatus.getBooksSimilarToBooksUserLikes.contains($book))
        $recommendationList: RegularUserRecommendedBooks()
    then
         modify($recommendationList){addToRecommended($book);}
end


rule "Get Interesting Authors for User"
    agenda-group "interesting-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false, $boughtBooks: getBoughtBooks())
        //, $allAuthors: getAllAuthors(), $interestingAuthors: getInterestingAuthors()
        $author: Author()
        Number(intValue >= 3) from accumulate(
            $book: Book(author.getId() == $author.getId()) from $boughtBooks,
            count($book)
        )
    then
        modify($userStatus){addToInterestingAuthors($author);}
end


rule "Get Interesting Genres for User"
    agenda-group "interesting-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false, $boughtBooks: getBoughtBooks(), $allGenres: getAllGenres(), $interestingGenres: getInterestingGenres())
        $books: Book() from $boughtBooks // Retrieve bought books for the user
        $totalNumOfBooks: Long() from accumulate(
            $book: Book() from $books,
            count($book)
        )
        $genre: Genre() from $allGenres
        $count: Long() from accumulate(
            $book: Book(genre == $genre) from $books,
            count($book)
        )
        eval(($count.floatValue() / $totalNumOfBooks.floatValue()) >= (30.0/100.0))
    then
        modify($userStatus){addToInterestingGenres($genre);}
end


rule "Recommend books that would be interesting to user"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false, $interestingGenres: getInterestingGenres(), $interestingAuthors: getInterestingAuthors())
        $recommendationList: RegularUserRecommendedBooks()
        $book: Book(author memberOf $interestingAuthors || genre memberOf $interestingGenres)
    then
        modify($recommendationList){addToRecommended($book);}
end

rule "Sort the list by recommendation points"
    agenda-group "final"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $recommendationList: RegularUserRecommendedBooks()
    then
        modify($recommendationList){sortByRecommendationPoints();}
end
