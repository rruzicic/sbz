import com.sbz.bookstore.model.Book;
import com.sbz.bookstore.model.RatingLevel;
import com.sbz.bookstore.model.Genre;
import com.sbz.bookstore.model.User;
import com.sbz.bookstore.model.facts.RegularUserRecommendedBooks;
import com.sbz.bookstore.model.facts.UserStatus;
import com.sbz.bookstore.model.Review;
import java.time.LocalDate;

rule "User is new if he has less than 10 reviews"
    agenda-group "user-new"
    lock-on-active
    when
        $user: User(reviews.size() < 10)
        $userStatus: UserStatus()
    then
        modify($userStatus) { setIsUserNew(true); }
end

rule "User is NOT new if he has more or equal to 10 reviews"
    agenda-group "user-new"
    lock-on-active
    when
        $user: User(reviews.size() >= 10)
        $userStatus: UserStatus()
    then
        modify($userStatus) { setIsUserNew(false); }
end

rule "User did NOT choose his favourite genres"
    agenda-group "user-choose-genres"
    lock-on-active
    when
        $user: User(favouriteGenres.isEmpty())
        $userStatus: UserStatus()
    then
        modify($userStatus) { setHasChosenFavouriteGenres(false); }
end

rule "User did choose his favourite genres"
    agenda-group "user-choose-genres"
    lock-on-active
    when
        $user: User(!favouriteGenres.isEmpty())
        $userStatus: UserStatus()
    then
        modify($userStatus) {setHasChosenFavouriteGenres(true);}
end

rule "Find books similar to books user likes"
    agenda-group "books"
    lock-on-active
    when
        $userStatus: UserStatus()
        $user: User(getId()==$userStatus.getUserId(), $favBooks: getBooksUserLikes())
        $book1: Book($reviews: reviews) from $favBooks
        $book2: Book(id != $book1.getId())
        $all : Number(floatValue > 0) from accumulate (
                 Review(getUser().getRatingForBook($book2.getId()) != -1

                ) from $reviews,
                //int numberOfSameRatings=0;numberOfSameRatings += $dist;numberOfSameRatings/
                init(int numberOfReviewers=0; ),
                action(numberOfReviewers += 1; ),
                result((float)numberOfReviewers)
        )
        $same : Number(floatValue/$all.floatValue() > (float) 0.7) from accumulate (
                        $r: Review(checkRatingSimilarity(getRating(), getUser().getRatingForBook($book2.getId()))

                        ) from $reviews,
                        //int numberOfSameRatings=0;numberOfSameRatings += $dist;numberOfSameRatings/
                        init(int numberOfSameRatings=0; ),
                        action(numberOfSameRatings += 1; ),
                        result((float)numberOfSameRatings)
                )
    then
        modify($userStatus){addBookToSimilarBooks($book2)}
end

rule "similar users"
    agenda-group "books"
    lock-on-active
    when
    $userStatus: UserStatus()
    $regularUser: User(getId()==$userStatus.getUserId(), $regularAvgRating: getAverageRating(), $reviews: getReviews())
    $user: User(getId()!=$regularUser.getId(), $userAvgRating: getAverageRating())
    Number(doubleValue >= 0.5) from accumulate (
        $r:Review($user.getRatingForBook(getBook().getId()) != -1
        ) from $reviews,
        init(double sum1=0; double sum2 = 0; double sum3=0;),
        action(sum1 += ($user.getRatingForBook($r.getBook().getId()) - $userAvgRating)*($user.getRatingForBook($r.getBook().getId()) - $userAvgRating);
               sum2 += ($r.getRating() - $regularAvgRating)*($r.getRating() - $regularAvgRating);
               sum3 += ($r.getRating() - $regularAvgRating)*($user.getRatingForBook($r.getBook().getId()) - $userAvgRating);),
        result(sum1*sum2 !=0 ? sum3/(Math.sqrt(sum2)*Math.sqrt(sum3)) : 0)
    )
    then
    modify($userStatus){addUserToSimilarUsers($user)};
end
rule "books liked by similar users"
    agenda-group "similar-users-books"
    lock-on-active
    when
    $userStatus: UserStatus($similarUsers: getSimilarUsers())
    $user: User($similarUsers.contains($user))
    $book: Book($user.getRatingForBook(getId()) >= 4)
    then
    modify($userStatus){addBookToBooksLikedBySimilarUsers($book)}
end


rule "recommend 10 best books if user chose his favourite genres"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == true, hasChosenFavouriteGenres == true)
        $recommendation: RegularUserRecommendedBooks()
    then
        modify($recommendation) {setRecommendedBooks($userStatus.getTenMostPopularBooksByFourAuthors());}
end

rule "Book liked by similar user"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $book: Book($userStatus.getBooksLikedBySimilarUsers.contains($book))
        $recommendationList: RegularUserRecommendedBooks()
    then
        modify($recommendationList){addToRecommended($book);}
end

rule "Book similar to books user likes"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $book: Book($userStatus.getBooksSimilarToBooksUserLikes.contains($book))
        $recommendationList: RegularUserRecommendedBooks()
    then
         modify($recommendationList){addToRecommended($book);}
end

rule "Recommend books that would be interesting to user"
    agenda-group "recommend-books"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $book: Book($userStatus.getInterestingBooks.contains($book))
        $recommendationList: RegularUserRecommendedBooks()
    then
        modify($recommendationList){addToRecommended($book);}
end

rule "Sort the list by recommendation points"
    agenda-group "final"
    lock-on-active
    when
        $userStatus: UserStatus(isUserNew == false)
        $recommendationList: RegularUserRecommendedBooks()
    then
        modify($recommendationList){sortByRecommendationPoints();}
end
